// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using OnlineExaminationSystem.Entities;

namespace OnlineExaminationSystem.Context;

public partial class OnlineExaminationSystemContext : DbContext
{
    public OnlineExaminationSystemContext()
    {
    }

    public OnlineExaminationSystemContext(DbContextOptions<OnlineExaminationSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionAnswer> QuestionAnswers { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentAnswerQuestion> StudentAnswerQuestions { get; set; }

    public virtual DbSet<StudentExam> StudentExams { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=OnlineExaminationSystem;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Course>(entity =>
        {
            entity.ToTable("Course");

            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.ToTable("Department");

            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Mgr).WithMany(p => p.Departments)
                .HasForeignKey(d => d.MgrId)
                .HasConstraintName("FK_Ins");
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.ToTable("Exam");

            entity.Property(e => e.CId).HasColumnName("C_Id");
            entity.Property(e => e.InsId).HasColumnName("Ins_Id");

            entity.HasOne(d => d.CIdNavigation).WithMany(p => p.Exams)
                .HasForeignKey(d => d.CId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exam_Course");

            entity.HasOne(d => d.Ins).WithMany(p => p.Exams)
                .HasForeignKey(d => d.InsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exam_Instructor");

            entity.HasMany(d => d.QIds).WithMany(p => p.EIds)
                .UsingEntity<Dictionary<string, object>>(
                    "ExamQuestion",
                    r => r.HasOne<Question>().WithMany()
                        .HasForeignKey("QId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ExamQuestion_Question"),
                    l => l.HasOne<Exam>().WithMany()
                        .HasForeignKey("EId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ExamQuestion_Exam"),
                    j =>
                    {
                        j.HasKey("EId", "QId");
                        j.ToTable("ExamQuestion");
                        j.IndexerProperty<int>("EId").HasColumnName("E_Id");
                        j.IndexerProperty<int>("QId").HasColumnName("Q_Id");
                    });
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.ToTable("Instructor");

           // entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Dept).WithMany(p => p.Instructors)
                .HasForeignKey(d => d.DeptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Instructor_Department");

            //entity.HasOne(d => d.IdNavigation).WithOne(p => p.Instructor)
            //    .HasForeignKey<Instructor>(d => d.Id)
            //    .OnDelete(DeleteBehavior.ClientSetNull)
            //    .HasConstraintName("FK_Instructor_Person");

            entity.HasMany(d => d.CIds).WithMany(p => p.Ins)
                .UsingEntity<Dictionary<string, object>>(
                    "InstructorCourse",
                    r => r.HasOne<Course>().WithMany()
                        .HasForeignKey("CId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_InstructorCourse_Course"),
                    l => l.HasOne<Instructor>().WithMany()
                        .HasForeignKey("InsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_InstructorCourse_Instructor"),
                    j =>
                    {
                        j.HasKey("InsId", "CId");
                        j.ToTable("InstructorCourse");
                        j.IndexerProperty<int>("InsId").HasColumnName("Ins_Id");
                        j.IndexerProperty<int>("CId").HasColumnName("C_Id");
                    });
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.ToTable("Person");

            entity.Property(e => e.AccountState)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Fname)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Lname)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.ToTable("Question");

            entity.Property(e => e.CId).HasColumnName("C_Id");
            entity.Property(e => e.Complexity).HasMaxLength(2);
            entity.Property(e => e.QuestionText)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Type).HasMaxLength(5);

            entity.HasOne(d => d.CIdNavigation).WithMany(p => p.Questions)
                .HasForeignKey(d => d.CId)
                .HasConstraintName("FK_C");
        });

        modelBuilder.Entity<QuestionAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_QuestionAnswer_1");

            entity.ToTable("QuestionAnswer");

            entity.Property(e => e.AnswerText)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.QId).HasColumnName("Q_Id");

            entity.HasOne(d => d.QIdNavigation).WithMany(p => p.QuestionAnswers)
                .HasForeignKey(d => d.QId)
                .HasConstraintName("fk_qId_cascade");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.ToTable("Student");

            // entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Ssn)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("SSN");

            entity.HasOne(d => d.Dept).WithMany(p => p.Students)
                .HasForeignKey(d => d.DeptId)
                .HasConstraintName("FK_Student_Department");

            //entity.HasOne(d => d.IdNavigation).WithOne(p => p.Student)
            //    .HasForeignKey<Student>(d => d.Id)
            //    .OnDelete(DeleteBehavior.ClientSetNull)
            //    .HasConstraintName("FK_Student_Person");

            entity.HasMany(d => d.CIds).WithMany(p => p.Sts)
                .UsingEntity<Dictionary<string, object>>(
                    "StudentCourse",
                    r => r.HasOne<Course>().WithMany()
                        .HasForeignKey("CId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_StudentCourse_Course"),
                    l => l.HasOne<Student>().WithMany()
                        .HasForeignKey("StId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_StudentCourse_Student"),
                    j =>
                    {
                        j.HasKey("StId", "CId");
                        j.ToTable("StudentCourse");
                        j.IndexerProperty<int>("StId").HasColumnName("St_Id");
                        j.IndexerProperty<int>("CId").HasColumnName("C_Id");
                    });
        });

        modelBuilder.Entity<StudentAnswerQuestion>(entity =>
        {
            entity.HasKey(e => new { e.StId, e.QId, e.QansId });

            entity.Property(e => e.StId).HasColumnName("St_Id");
            entity.Property(e => e.QId).HasColumnName("Q_Id");
            entity.Property(e => e.QansId).HasColumnName("QAns_Id");

            entity.HasOne(d => d.QIdNavigation).WithMany(p => p.StudentAnswerQuestions)
                .HasForeignKey(d => d.QId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentAnswerQuestions_Question");

            entity.HasOne(d => d.Qans).WithMany(p => p.StudentAnswerQuestions)
                .HasForeignKey(d => d.QansId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentAnswerQuestions_QuestionAnswer");

            entity.HasOne(d => d.St).WithMany(p => p.StudentAnswerQuestions)
                .HasForeignKey(d => d.StId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentAnswerQuestions_Student");
        });

        modelBuilder.Entity<StudentExam>(entity =>
        {
            entity.HasKey(e => new { e.StId, e.EId });

            entity.ToTable("StudentExam");

            entity.Property(e => e.StId).HasColumnName("St_Id");
            entity.Property(e => e.EId).HasColumnName("E_Id");
            entity.Property(e => e.IsTaken).HasDefaultValue(0);

            entity.HasOne(d => d.EIdNavigation).WithMany(p => p.StudentExams)
                .HasForeignKey(d => d.EId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentExam_Exam");

            entity.HasOne(d => d.St).WithMany(p => p.StudentExams)
                .HasForeignKey(d => d.StId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentExam_Student");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => new { e.TId, e.CId });

            entity.ToTable("Topic");

            entity.Property(e => e.TId)
                .ValueGeneratedOnAdd()
                .HasColumnName("T_Id");
            entity.Property(e => e.CId).HasColumnName("C_Id");
            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.CIdNavigation).WithMany(p => p.Topics)
                .HasForeignKey(d => d.CId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Topic_Course");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}